[{"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\index.js":"1","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\routes.js":"2","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\redux\\reducers\\index.js":"3","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\hoc\\layout.js":"4","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\hoc\\auth.js":"5","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\Reset_user\\reset_pass.js":"6","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\Register_login\\register.js":"7","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\add_file.js":"8","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\update_profile.js":"9","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\utils\\page_not_found.js":"10","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\cart.js":"11","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\system\\Languages\\list_languages.js":"12","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\system\\Mysites\\edit_mysite.js":"13","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\APIdata\\Nations\\list_nations.js":"14","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\system\\Taxonomy\\add_taxonomy.js":"15","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\system\\Languages\\add_language.js":"16","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\system\\Menu\\add_menu.js":"17","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\system\\Mysites\\list_mysite.js":"18","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\system\\Menu\\list_menu.js":"19","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\system\\Mysites\\add_mysite.js":"20","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\system\\Menu\\edit_menu.js":"21","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\system\\Blocks\\list_block.js":"22","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\system\\Blocks\\edit_block.js":"23","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\system\\Taxonomy\\list_taxonomy.js":"24","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\system\\Blocks\\add_block.js":"25","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\CMS\\Slides\\add_slide.js":"26","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\CMS\\Products\\edit_product.js":"27","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\system\\Taxonomy\\edit_taxonomy.js":"28","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\CMS\\Slides\\list_slides.js":"29","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\CMS\\Products\\add_product.js":"30","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\CMS\\Slides\\edit_slide.js":"31","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\CMS\\Products\\list_product.js":"32","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\Register_login\\index.js":"33","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\Reset_user\\index.js":"34","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\index.js":"35","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\Home\\index.js":"36","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\Product\\index.js":"37","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\Shop\\index.js":"38","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\redux\\reducers\\user_reducer.js":"39","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\redux\\reducers\\system\\block_reducer.js":"40","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\redux\\reducers\\APIdata\\dataset_reducer.js":"41","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\redux\\reducers\\system\\messages_reducer.js":"42","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\redux\\reducers\\system\\mysite_reducer.js":"43","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\redux\\reducers\\system\\language_reducer.js":"44","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\redux\\reducers\\system\\menu_reducer.js":"45","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\redux\\reducers\\system\\taxonomy_reducer.js":"46","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\redux\\reducers\\CMS\\product_reducer.js":"47","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\redux\\reducers\\CMS\\slides_reducer.js":"48","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\utils\\paypal.js":"49","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\hoc\\user.js":"50","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\update_personal_nfo.js":"51","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\utils\\Plugs\\cms_plugs.js":"52","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\redux\\actions\\user_actions.js":"53","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\utils\\Form\\formfield.js":"54","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\utils\\Form\\formActions.js":"55","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\utils\\User\\product_block.js":"56","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\CMS\\Products\\list_product_block.js":"57","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\utils\\Form\\CMS\\fileupload_generic.js":"58","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\utils\\Funcs\\translationfuncs.js":"59","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\CMS\\Slides\\list_slides_block.js":"60","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\system\\Taxonomy\\list_taxonomy_block.js":"61","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\system\\Mysites\\add_themePrefs_header.js":"62","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\system\\Mysites\\add_themePrefs_body.js":"63","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\system\\Mysites\\add_themePrefs_footer.js":"64","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\system\\Mysites\\add_ecomPrefs.js":"65","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\system\\Mysites\\add_layoutPrefs.js":"66","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\system\\Mysites\\add_mysitePrefs.js":"67","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\system\\Mysites\\add_addressPrefs.js":"68","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\system\\Mysites\\list_mysite_block.js":"69","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\system\\Languages\\add_language_block.js":"70","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\APIdata\\Nations\\list_nations_block.js":"71","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\system\\Mysites\\edit_themePrefs_body.js":"72","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\system\\Mysites\\edit_themePrefs_footer.js":"73","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\Register_login\\login.js":"74","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\utils\\User\\history_block.js":"75","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\Shop\\loadmoreCards.js":"76","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\redux\\actions\\types.js":"77","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\Header_footer\\Footer\\index.js":"78","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\Header_footer\\Header\\index.js":"79","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\utils\\button.js":"80","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\utils\\Form\\colorpicker.js":"81","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\utils\\misc.js":"82","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\utils\\collapseCheckbox.js":"83","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\utils\\collapseRadio.js":"84","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\redux\\actions\\products_actions.js":"85","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\redux\\actions\\generic\\generic_actions.js":"86","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\utils\\page_top.js":"87","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\Product\\prodNfo.js":"88","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\Product\\prodImg.js":"89","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\system\\Mysites\\edit_ecomPrefs.js":"90","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\system\\Mysites\\edit_themePrefs_header.js":"91","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\system\\Mysites\\edit_addressPrefs.js":"92","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\system\\Mysites\\edit_mysitePrefs.js":"93","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\system\\Mysites\\edit_layoutPrefs.js":"94","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\system\\Languages\\list_languages_block.js":"95","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\utils\\card_block_shop.js":"96","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\Header_footer\\Header\\logo.js":"97","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\Header_footer\\Header\\menuCurrency.js":"98","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\Header_footer\\Header\\menuLanguage.js":"99","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\redux\\actions\\generic\\generic_types.js":"100","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\redux\\actions\\generic\\generic_handlers.js":"101","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\utils\\card.js":"102","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\utils\\Form\\Fixed_categories\\taxonomy_type.js":"103","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\utils\\Form\\checkFormField.js":"104","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\utils\\Form\\Uimaterials\\Stateless\\uimat_list_nostate.js":"105","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\utils\\Form\\Uimaterials\\Stateless\\uimat_transferlist_nostate.js":"106","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\utils\\Form\\Uimaterials\\State\\uimat_transferlist_state.js":"107","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\utils\\Funcs\\basefuncs.js":"108","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\Generic\\parts_funcs.js":"109","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\Generic\\taxo_funcs.js":"110","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\Generic\\submit_funcs.js":"111","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\Generic\\remove_funcs.js":"112","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\Generic\\repos_funcs.js":"113","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\utils\\Funcs\\populate_funcs.js":"114","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\Generic\\compo_funcs.js":"115","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\Generic\\errormsg_funcs.js":"116","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\Generic\\image_funcs.js":"117"},{"size":748,"mtime":1590853466284,"results":"118","hashOfConfig":"119"},{"size":5715,"mtime":1610117365926,"results":"120","hashOfConfig":"119"},{"size":980,"mtime":1610117402904,"results":"121","hashOfConfig":"119"},{"size":6886,"mtime":1609969269543,"results":"122","hashOfConfig":"119"},{"size":1949,"mtime":1605379725648,"results":"123","hashOfConfig":"119"},{"size":4547,"mtime":1606711102666,"results":"124","hashOfConfig":"119"},{"size":7777,"mtime":1606711104718,"results":"125","hashOfConfig":"119"},{"size":3763,"mtime":1590803531000,"results":"126","hashOfConfig":"119"},{"size":315,"mtime":1590803531000,"results":"127","hashOfConfig":"119"},{"size":526,"mtime":1590803531000,"results":"128","hashOfConfig":"119"},{"size":5069,"mtime":1590803531000,"results":"129","hashOfConfig":"119"},{"size":13720,"mtime":1609521109210,"results":"130","hashOfConfig":"119"},{"size":12803,"mtime":1608762370701,"results":"131","hashOfConfig":"119"},{"size":9266,"mtime":1609521691256,"results":"132","hashOfConfig":"119"},{"size":30542,"mtime":1613340196285,"results":"133","hashOfConfig":"119"},{"size":17971,"mtime":1613248071098,"results":"134","hashOfConfig":"119"},{"size":0,"mtime":1605804265711,"results":"135","hashOfConfig":"119"},{"size":13457,"mtime":1609807594444,"results":"136","hashOfConfig":"119"},{"size":0,"mtime":1605804282430,"results":"137","hashOfConfig":"119"},{"size":13106,"mtime":1608762358333,"results":"138","hashOfConfig":"119"},{"size":0,"mtime":1605804274764,"results":"139","hashOfConfig":"119"},{"size":0,"mtime":1605833164359,"results":"140","hashOfConfig":"119"},{"size":0,"mtime":1605804526277,"results":"141","hashOfConfig":"119"},{"size":21228,"mtime":1612281077050,"results":"142","hashOfConfig":"119"},{"size":0,"mtime":1605804519472,"results":"143","hashOfConfig":"119"},{"size":21207,"mtime":1611879785884,"results":"144","hashOfConfig":"119"},{"size":0,"mtime":1605804689031,"results":"145","hashOfConfig":"119"},{"size":25871,"mtime":1613344059792,"results":"146","hashOfConfig":"119"},{"size":21751,"mtime":1609832811758,"results":"147","hashOfConfig":"119"},{"size":31707,"mtime":1611879822775,"results":"148","hashOfConfig":"119"},{"size":31849,"mtime":1611871963607,"results":"149","hashOfConfig":"119"},{"size":22415,"mtime":1609940845152,"results":"150","hashOfConfig":"119"},{"size":1092,"mtime":1590803531000,"results":"151","hashOfConfig":"119"},{"size":2879,"mtime":1606711103751,"results":"152","hashOfConfig":"119"},{"size":1447,"mtime":1591560638492,"results":"153","hashOfConfig":"119"},{"size":1848,"mtime":1608981377969,"results":"154","hashOfConfig":"119"},{"size":2040,"mtime":1590803531000,"results":"155","hashOfConfig":"119"},{"size":5894,"mtime":1610231725258,"results":"156","hashOfConfig":"119"},{"size":2162,"mtime":1609857895001,"results":"157","hashOfConfig":"119"},{"size":393,"mtime":1605816824987,"results":"158","hashOfConfig":"119"},{"size":409,"mtime":1605370886817,"results":"159","hashOfConfig":"119"},{"size":438,"mtime":1605370938360,"results":"160","hashOfConfig":"119"},{"size":512,"mtime":1608110263969,"results":"161","hashOfConfig":"119"},{"size":541,"mtime":1605370927847,"results":"162","hashOfConfig":"119"},{"size":370,"mtime":1605817030254,"results":"163","hashOfConfig":"119"},{"size":406,"mtime":1613344145883,"results":"164","hashOfConfig":"119"},{"size":407,"mtime":1605817459137,"results":"165","hashOfConfig":"119"},{"size":382,"mtime":1605370741784,"results":"166","hashOfConfig":"119"},{"size":2087,"mtime":1593474705671,"results":"167","hashOfConfig":"119"},{"size":3913,"mtime":1610117537816,"results":"168","hashOfConfig":"119"},{"size":5150,"mtime":1606711101208,"results":"169","hashOfConfig":"119"},{"size":8173,"mtime":1612005541883,"results":"170","hashOfConfig":"119"},{"size":4012,"mtime":1609968502463,"results":"171","hashOfConfig":"119"},{"size":7129,"mtime":1610331988126,"results":"172","hashOfConfig":"119"},{"size":8853,"mtime":1612264369724,"results":"173","hashOfConfig":"119"},{"size":1888,"mtime":1593474723494,"results":"174","hashOfConfig":"119"},{"size":4480,"mtime":1610113732460,"results":"175","hashOfConfig":"119"},{"size":4514,"mtime":1607214594882,"results":"176","hashOfConfig":"119"},{"size":5936,"mtime":1613247337424,"results":"177","hashOfConfig":"119"},{"size":4357,"mtime":1605370722543,"results":"178","hashOfConfig":"119"},{"size":5333,"mtime":1611625954444,"results":"179","hashOfConfig":"119"},{"size":7096,"mtime":1608194259483,"results":"180","hashOfConfig":"119"},{"size":7041,"mtime":1608136540588,"results":"181","hashOfConfig":"119"},{"size":7082,"mtime":1608194425290,"results":"182","hashOfConfig":"119"},{"size":4429,"mtime":1608193119729,"results":"183","hashOfConfig":"119"},{"size":6726,"mtime":1608136442703,"results":"184","hashOfConfig":"119"},{"size":14146,"mtime":1609678042600,"results":"185","hashOfConfig":"119"},{"size":7121,"mtime":1608192832304,"results":"186","hashOfConfig":"119"},{"size":4089,"mtime":1608110263963,"results":"187","hashOfConfig":"119"},{"size":5306,"mtime":1603760652080,"results":"188","hashOfConfig":"119"},{"size":1680,"mtime":1603836713719,"results":"189","hashOfConfig":"119"},{"size":6487,"mtime":1608223115977,"results":"190","hashOfConfig":"119"},{"size":6521,"mtime":1608231613852,"results":"191","hashOfConfig":"119"},{"size":3509,"mtime":1606711105902,"results":"192","hashOfConfig":"119"},{"size":1141,"mtime":1590803531000,"results":"193","hashOfConfig":"119"},{"size":716,"mtime":1590803531000,"results":"194","hashOfConfig":"119"},{"size":2933,"mtime":1610117454245,"results":"195","hashOfConfig":"119"},{"size":4774,"mtime":1607331927518,"results":"196","hashOfConfig":"119"},{"size":4174,"mtime":1609978322622,"results":"197","hashOfConfig":"119"},{"size":1600,"mtime":1590803531000,"results":"198","hashOfConfig":"119"},{"size":2598,"mtime":1608110263964,"results":"199","hashOfConfig":"119"},{"size":367,"mtime":1605833353058,"results":"200","hashOfConfig":"119"},{"size":3195,"mtime":1590803531000,"results":"201","hashOfConfig":"119"},{"size":2904,"mtime":1606711084183,"results":"202","hashOfConfig":"119"},{"size":4098,"mtime":1605847476262,"results":"203","hashOfConfig":"119"},{"size":6410,"mtime":1611796320053,"results":"204","hashOfConfig":"119"},{"size":240,"mtime":1590803531000,"results":"205","hashOfConfig":"119"},{"size":2819,"mtime":1590803531000,"results":"206","hashOfConfig":"119"},{"size":2540,"mtime":1590803531000,"results":"207","hashOfConfig":"119"},{"size":3882,"mtime":1608222506654,"results":"208","hashOfConfig":"119"},{"size":6509,"mtime":1608762386351,"results":"209","hashOfConfig":"119"},{"size":6615,"mtime":1608212212087,"results":"210","hashOfConfig":"119"},{"size":11803,"mtime":1611859561424,"results":"211","hashOfConfig":"119"},{"size":5642,"mtime":1608233165542,"results":"212","hashOfConfig":"119"},{"size":3195,"mtime":1595787097757,"results":"213","hashOfConfig":"119"},{"size":846,"mtime":1590803531000,"results":"214","hashOfConfig":"119"},{"size":1017,"mtime":1609807564618,"results":"215","hashOfConfig":"119"},{"size":4579,"mtime":1610231868250,"results":"216","hashOfConfig":"119"},{"size":5653,"mtime":1610231875168,"results":"217","hashOfConfig":"119"},{"size":3630,"mtime":1610117497741,"results":"218","hashOfConfig":"119"},{"size":414,"mtime":1605753202634,"results":"219","hashOfConfig":"119"},{"size":2631,"mtime":1590803531000,"results":"220","hashOfConfig":"119"},{"size":147,"mtime":1610845697655,"results":"221","hashOfConfig":"119"},{"size":7660,"mtime":1611549215897,"results":"222","hashOfConfig":"119"},{"size":2900,"mtime":1611117522588,"results":"223","hashOfConfig":"119"},{"size":5601,"mtime":1611117516791,"results":"224","hashOfConfig":"119"},{"size":4699,"mtime":1611117491654,"results":"225","hashOfConfig":"119"},{"size":4973,"mtime":1612677327051,"results":"226","hashOfConfig":"119"},{"size":384,"mtime":1612281274099,"results":"227","hashOfConfig":"119"},{"size":17685,"mtime":1613325731419,"results":"228","hashOfConfig":"119"},{"size":17937,"mtime":1613344305796,"results":"229","hashOfConfig":"119"},{"size":4270,"mtime":1612281259249,"results":"230","hashOfConfig":"119"},{"size":7042,"mtime":1613341125435,"results":"231","hashOfConfig":"119"},{"size":1370,"mtime":1612676585987,"results":"232","hashOfConfig":"119"},{"size":2850,"mtime":1613344013899,"results":"233","hashOfConfig":"119"},{"size":2421,"mtime":1613342676999,"results":"234","hashOfConfig":"119"},{"size":1036,"mtime":1613344492069,"results":"235","hashOfConfig":"119"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},"drlngo",{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"293","messages":"294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"297","messages":"298","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"299","usedDeprecatedRules":"238"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"308","messages":"309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"312","messages":"313","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"314","usedDeprecatedRules":"238"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"331","messages":"332","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"333","messages":"334","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"339","messages":"340","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"341","messages":"342","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"353","messages":"354","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"355","messages":"356","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"357","messages":"358","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"359","messages":"360","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"361","messages":"362","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"363","messages":"364","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"365","messages":"366","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"367","messages":"368","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"369","messages":"370","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"371","messages":"372","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"373","messages":"374","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"375","messages":"376","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"377","messages":"378","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"379","messages":"380","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"383","messages":"384","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"385","messages":"386","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"387","messages":"388","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"389","messages":"390","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"391","messages":"392","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"393","messages":"394","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"395","messages":"396","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"397","usedDeprecatedRules":"238"},{"filePath":"398","messages":"399","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"400","messages":"401","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"402","messages":"403","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"404","messages":"405","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"406","messages":"407","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"408","messages":"409","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"410","messages":"411","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"412","messages":"413","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"414","messages":"415","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"416","messages":"417","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"418","messages":"419","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"420","messages":"421","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"422","messages":"423","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"424","messages":"425","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"426","messages":"427","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"428","messages":"429","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"430","messages":"431","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"432","messages":"433","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"434","messages":"435","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"436","messages":"437","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"438","usedDeprecatedRules":"238"},{"filePath":"439","messages":"440","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"441","messages":"442","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"443","messages":"444","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"445","messages":"446","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"447","messages":"448","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"449","messages":"450","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"451","messages":"452","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"453","messages":"454","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"455","messages":"456","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"457","messages":"458","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"459","messages":"460","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"461","usedDeprecatedRules":"238"},{"filePath":"462","messages":"463","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"464","messages":"465","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"238"},{"filePath":"466","messages":"467","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"468","messages":"469","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"470","usedDeprecatedRules":"238"},{"filePath":"471","messages":"472","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"473","messages":"474","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"475","messages":"476","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\index.js",[],["477","478"],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\routes.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\redux\\reducers\\index.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\hoc\\layout.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\hoc\\auth.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\Reset_user\\reset_pass.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\Register_login\\register.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\add_file.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\update_profile.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\utils\\page_not_found.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\cart.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\system\\Languages\\list_languages.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\system\\Mysites\\edit_mysite.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\APIdata\\Nations\\list_nations.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\system\\Taxonomy\\add_taxonomy.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\system\\Languages\\add_language.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\system\\Menu\\add_menu.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\system\\Mysites\\list_mysite.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\system\\Menu\\list_menu.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\system\\Mysites\\add_mysite.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\system\\Menu\\edit_menu.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\system\\Blocks\\list_block.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\system\\Blocks\\edit_block.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\system\\Taxonomy\\list_taxonomy.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\system\\Blocks\\add_block.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\CMS\\Slides\\add_slide.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\CMS\\Products\\edit_product.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\system\\Taxonomy\\edit_taxonomy.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\CMS\\Slides\\list_slides.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\CMS\\Products\\add_product.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\CMS\\Slides\\edit_slide.js",["479"],"import React, { Component } from 'react';\nimport UserLayout from '../../../../../hoc/user';\n\nimport FormField from '../../../../utils/Form/formfield';\nimport { update, generateData, isFormValid, populateFields, populatePositionField } from '../../../../utils/Form/formActions';\nimport { runtranslation, updateEngine } from '../../../../utils/Funcs/translationfuncs';\n\nimport { connect } from 'react-redux';\nimport FileUpload from '../../../../utils/Form/CMS/fileupload_generic'\n\n// import { ob_keyfilter } from '../../../../utils/Funcs/basefuncs'\nimport {\n    plg_queryMany,\n    plg_clearProps,\n    plg_create_oprMod,\n    plg_updateMany,\n    plg_updateOne_queMod_oprMod,\n    plg_countDocuments,\n    plg_findOne_QueMod\n} from '../../../../utils/Plugs/cms_plugs';\n\nclass EditSlide extends Component {\n\n    state = {\n        localStorage: {\n            view: {\n                limit: 5,\n                skip: 0,\n                size: 0,\n                sortBy: 'position',\n                sortOrder: 1\n\n            },\n            form: {\n                formError: false,\n                formSuccess: false,\n                formdata: {\n                    name: {\n                        element: 'input',\n                        value: '',\n                        config: {\n                            label: 'Name',\n                            name: 'name_input',\n                            type: 'text',\n                            placeholder: 'Enter text for Name'\n                        },\n                        validation: {\n                            required: false\n                        },\n                        valid: false,\n                        touched: false,\n                        validationMessage: '',\n                        showlabel: false\n\n                    },\n                    lineTwo: {\n                        element: 'uimtextareaautosize',\n                        value: '',\n                        config: {\n                            label: 'Line Two',\n                            name: 'name_input',\n                            type: 'text',\n                            placeholder: 'Enter text for Line Two'\n                        },\n                        validation: {\n                            required: false\n                        },\n                        valid: false,\n                        touched: false,\n                        validationMessage: '',\n                        showlabel: false\n\n                    },\n                    position: {\n                        element: 'select',\n                        value: '',\n                        config: {\n                            label: 'Position',\n                            name: 'position_input',\n                            options: []\n\n                        },\n                        validation: {\n                            required: true\n                        },\n                        valid: true,\n                        touched: false,\n                        validationMessage: '',\n                        showlabel: true\n\n                    },\n                    language: {\n                        element: 'mylabel',\n                        value: '',\n                        config: {\n                            label: 'Language',\n                            name: 'language_input',\n                            type: 'hidden',\n                            placeholder: 'Language goes here',\n                        },\n                        validation: {\n                            required: true\n                        },\n                        valid: true,\n                        touched: false,\n                        validationMessage: '',\n                        showlabel: true\n\n                    },\n                    country: {\n                        element: 'mylabel',\n                        value: '',\n                        config: {\n                            label: 'Country',\n                            name: 'country_input',\n                            type: 'hidden',\n                            placeholder: 'Country goes here',\n                        },\n                        validation: {\n                            required: true\n                        },\n                        valid: true,\n                        touched: false,\n                        validationMessage: '',\n                        showlabel: false\n\n                    },\n                    lgbinder: {\n                        element: 'mylabel',\n                        value: '',\n                        config: {\n                            label: 'Language Binder',\n                            name: 'language_binder_input',\n                            type: 'hidden',\n                            placeholder: 'Language Binder goes here',\n                        },\n                        validation: {\n                            required: false\n                        },\n                        valid: true,\n                        touched: false,\n                        validationMessage: '',\n                        showlabel: false\n\n                    },\n                    visible: {\n                        element: 'select',\n                        value: true,\n                        config: {\n                            label: 'Visible',\n                            name: 'visible_input',\n                            options: [\n                                { key: true, value: 'yes' },\n                                { key: false, value: 'no' },\n                            ]\n\n                        },\n                        validation: {\n                            required: true\n                        },\n                        valid: true,\n                        touched: false,\n                        validationMessage: '',\n                        showlabel: true\n\n                    },\n                    images: {\n                        value: [],\n\n\n                        validation: {\n                            required: false\n                        },\n                        valid: true,\n                        touched: false,\n                        validationMessage: '',\n                        showlabel: false\n\n                    }\n\n                }\n            }\n\n        }\n\n    }\n\n    async componentDidUpdate(prevProps, prevState) {\n\n\n        if (\n            'localeUser' in this.props.user\n        ) {\n            if (prevProps.slides.DetailSlide !== this.props.slides.DetailSlide && 'DetailSlide' in this.props.slides !== '' && 'DetailSlide' in this.props.slides !== false) {\n\n                let newLocalStorage = { ...this.state.localStorage }\n                let inQuery\n\n                newLocalStorage['form']['formdata'] = await populateFields({ formdata: this.state.localStorage.form.formdata, fields: this.props.slides.DetailSlide });\n\n                inQuery = {\n                    country: { \"$eq\": this.props.user.localeUser.referenceID.alpha2Code },\n                    language: { \"$eq\": this.props.user.localeUser.referenceID.languages[0].iso639_1 },\n                }\n\n                let response = await plg_queryMany({ mystate: this.state, model: 'slide', myprops: this.props, actionType: 'samestate', inQuery, distinct: '_id' })\n\n                newLocalStorage['form']['formdata'] = await populatePositionField({ formdata: this.state.localStorage.form.formdata, response: response.payload, field: 'position', type: 'edit' });\n\n                this.updateLocalStorage(newLocalStorage)\n\n            } else if ('DetailSlide' in this.props.slides === false\n                || 'DetailSlide' in this.props.slides === ''\n\n            ) {\n\n                // WHen Detail Slide is clear\n                let newLocalStorage = { ...this.state.localStorage }\n                let inQuery\n\n                inQuery = { _id: { \"$eq\": this.props.match.params.id } }\n                let found = await plg_findOne_QueMod({ model: 'slide', myprops: this.props, actionType: 'detail', inQuery })\n                newLocalStorage['form']['formdata'] = await populateFields({ formdata: this.state.localStorage.form.formdata, fields: found.payload });\n\n                inQuery = {\n                    country: { \"$eq\": this.props.user.localeUser.referenceID.alpha2Code },\n                    language: { \"$eq\": this.props.user.localeUser.referenceID.languages[0].iso639_1 },\n                }\n\n                let response = await plg_queryMany({ mystate: this.state, model: 'slide', myprops: this.props, actionType: 'samestate', inQuery, distinct: '_id' })\n\n                newLocalStorage['form']['formdata'] = await populatePositionField({ formdata: this.state.localStorage.form.formdata, response: response.payload, field: 'position', type: 'edit' });\n\n                this.updateLocalStorage(newLocalStorage)\n\n            } else if (prevProps.user.localeUser !== this.props.user.localeUser && 'DetailSlide' in this.props.slides) {\n\n                // WHen I change the language\n                let found = {}\n                let inQuery\n                let inOperator\n                let inParams\n                let count\n\n                if (this.props.slides.DetailSlide.lgbinder !== '') {\n                    // WHen my Slide has lgbindr\n\n                    inQuery = {\n                        lgbinder: { \"$eq\": this.props.slides.DetailSlide.lgbinder },\n                        country: { \"$eq\": this.props.user.localeUser.referenceID.alpha2Code },\n                        language: { \"$eq\": this.props.user.localeUser.referenceID.languages[0].iso639_1 }\n                    }\n\n                    found = await plg_findOne_QueMod({ model: 'slide', myprops: this.props, actionType: 'samestate', inQuery })\n                } else {\n                    found = Object.assign(found, { payload: '' });\n                }\n\n                if (found.payload !== '') {\n\n                    inQuery = {\n                        _id: { \"$eq\": found.payload._id },\n                    }\n                    // FOUND With the same lgbinder\n                    this.props.history.push(`${found.payload._id}`)\n\n                    await plg_findOne_QueMod({ model: 'slide', myprops: this.props, actionType: 'detail', inQuery })\n\n                } else {\n                    // If Slide in Target Translation doesn't exist\n                    let dataToSubmit = generateData(this.state.localStorage.form.formdata, 'slides');\n\n                    // RUN MY TRANSLATION ENGINE HERE\n                    inQuery = { name: { \"$eq\": this.props.mysite.CurrentMysite.mysitePrefs.translation_engine } }\n                    let engine = await plg_findOne_QueMod({ model: 'transengine', myprops: this.props, actionType: 'samestate', inQuery })\n\n\n                    let cleanTranslation = await runtranslation({ source: prevProps.user.localeUser.referenceID.languages[0].iso639_1, target: this.props.user.localeUser.referenceID.languages[0].iso639_1, content: dataToSubmit.lineTwo, myprops: this.props, engine: engine.payload  })\n                    // If Translation API responded correctly\n                    if (cleanTranslation.Success) {\n\n                        inQuery = {\n                            country: { \"$eq\": this.props.user.localeUser.referenceID.alpha2Code },\n                            language: { \"$eq\": this.props.user.localeUser.referenceID.languages[0].iso639_1 },\n                        }\n\n                        count = await plg_countDocuments({ model: 'slide', myprops: this.props, actionType: 'samestate', inQuery })\n\n                        if (this.props.slides.DetailSlide.position > count.payload) {\n                            dataToSubmit['position'] = count.payload + 1\n                        } else {\n                            dataToSubmit['position'] = this.props.slides.DetailSlide.position\n                        }\n\n                        // ADDITIONA Position ON EDIT\n\n                        dataToSubmit['language'] = this.props.user.localeUser.referenceID.languages[0].iso639_1\n                        dataToSubmit['country'] = this.props.user.localeUser.referenceID.alpha2Code\n                        dataToSubmit['lineTwo'] = cleanTranslation.result\n\n                        if (this.props.slides.DetailSlide.lgbinder === '') {\n\n                            dataToSubmit['lgbinder'] = this.props.slides.DetailSlide._id\n\n                            // Update lgbinder on root slide\n                            inQuery = { _id: { \"$eq\": this.props.slides.DetailSlide._id } }\n                            inOperator = { '$set': { lgbinder: this.props.slides.DetailSlide._id } }\n\n                            await plg_updateOne_queMod_oprMod({ model: 'slide', myprops: this.props, actionType: 'detail', inQuery, inOperator, inParams })\n\n                        } else {\n\n                            dataToSubmit['lgbinder'] = this.props.slides.DetailSlide.lgbinder\n\n                        }\n\n                        let added = await plg_create_oprMod({ model: 'slide', myprops: this.props, actionType: 'samestate', inInsert: dataToSubmit })\n                        // await updateEngine({ engine: engine.payload, myprops: this.props })\n\n                        // FIND With the same position\n                        inQuery = {\n                            _id: { \"$ne\": added.payload._id },\n                            country: { \"$eq\": added.payload.country },\n                            language: { \"$eq\": added.payload.language },\n                            position: { \"$gte\": added.payload.position },\n                        }\n                        inOperator = {\n                            \"$inc\": { position: 1 }\n                        }\n\n                        await plg_updateMany({ model: 'slide', myprops: this.props, actionType: 'samestate', inQuery, inOperator })\n                        this.props.history.push(`${added.payload._id}`)\n\n                        inQuery = {\n                            _id: { \"$eq\": added.payload._id }\n                        }\n                        await plg_findOne_QueMod({ model: 'slide', myprops: this.props, actionType: 'detail', inQuery })\n                    } else {\n\n                        // API DID NOT RETURN TRANSLATION\n                        inQuery = { _id: { \"$eq\": this.props.match.params.id } }\n                        await plg_findOne_QueMod({ model: 'slide', myprops: this.props, actionType: 'detail', inQuery })\n\n                        // Set Custom Message\n                        inQuery = { type: { \"$eq\": 'custom' } }\n                        inOperator = { '$set': { 'text': cleanTranslation.result } }\n                        await plg_updateOne_queMod_oprMod({ model: 'message', actionType: 'detail', myprops: this.props, inQuery, inOperator })\n\n                        // Clear Message\n                        setTimeout(async () => {\n\n                            // To nie działa, nie pokazuje komunikatu\n                            inQuery = { type: { \"$eq\": 'custom' } }\n                            inOperator = { '$set': { 'text': '' } }\n                            await plg_updateOne_queMod_oprMod({ model: 'message', actionType: 'samestate', myprops: this.props, inQuery, inOperator })\n                            await plg_clearProps({ myprops: this.props, model: 'message', actionType: 'detail' })\n\n                        }, 5000)\n                    }\n\n                }\n\n            }\n\n        }\n    }\n\n    async componentDidMount() {\n\n        if ('localeUser' in this.props.user) {\n\n            let newLocalStorage = { ...this.state.localStorage }\n            let inQuery\n\n            inQuery = { _id: { \"$eq\": this.props.match.params.id } }\n            let found = await plg_findOne_QueMod({ model: 'slide', myprops: this.props, actionType: 'detail', inQuery })\n            newLocalStorage['form']['formdata'] = await populateFields({ formdata: this.state.localStorage.form.formdata, fields: found.payload });\n\n            inQuery = {\n                country: { \"$eq\": this.props.user.localeUser.referenceID.alpha2Code },\n                language: { \"$eq\": this.props.user.localeUser.referenceID.languages[0].iso639_1 },\n            }\n\n            let response = await plg_queryMany({ mystate: this.state, model: 'slide', myprops: this.props, actionType: 'samestate', inQuery, distinct: '_id' })\n\n            newLocalStorage['form']['formdata'] = await populatePositionField({ formdata: this.state.localStorage.form.formdata, response: response.payload, field: 'position', type: 'edit' });\n\n            this.updateLocalStorage(newLocalStorage)\n\n        }\n\n    }\n\n    async componentWillUnmount() {\n        await plg_clearProps({ myprops: this.props, model: 'slide', actionType: 'list' })\n        await plg_clearProps({ myprops: this.props, model: 'slide', actionType: 'detail' })\n    }\n\n\n    updateLocalStorage = (localStorage) => {\n\n        this.setState({\n            localStorage\n        })\n    }\n    showMessages = () => {\n\n        if (this.props.messages.DetailMessage) {\n\n            if (this.props.messages.DetailMessage.type === 'completed') {\n                return <div className=\"form_success\">{this.props.messages.DetailMessage.text}</div>\n            } else if (this.props.messages.DetailMessage.type === 'loading') {\n                return <div className=\"form_success\">{this.props.messages.DetailMessage.text}</div>\n            } else if (this.props.messages.DetailMessage.type === 'error') {\n                return <div className=\"error_label\">{this.props.messages.DetailMessage.text}</div>\n            } else if (this.props.messages.DetailMessage.type === 'custom') {\n                return <div className=\"error_label\">{this.props.messages.DetailMessage.text}</div>\n            }\n\n        }\n    }\n    updateFormValues = (element) => {\n        let newLocalStorage = { ...this.state.localStorage }\n\n        const newFormdata = update(element, this.state.localStorage.form.formdata, 'slide');\n\n        newLocalStorage['form']['formdata'] = newFormdata\n\n        this.updateLocalStorage(newLocalStorage)\n    }\n\n    // Event , Translate jako object\n    submitForm = async ({ event = null, translate = null }) => {\n        event.preventDefault();\n\n        let current = { ...this.props.slides.DetailSlide }\n\n        let inQuery\n        let inOperator\n        let inParams\n        let otherlanguages\n\n\n        // HANDLE MESSAGES\n        inQuery = { type: { \"$eq\": 'loading' } }\n        await plg_findOne_QueMod({ model: 'message', myprops: this.props, actionType: 'detail', inQuery })\n\n        let dataToSubmit = generateData(this.state.localStorage.form.formdata, 'slides');\n        let formIsValid = isFormValid(this.state.localStorage.form.formdata, 'slides');\n\n        if (formIsValid) {\n            let cleanTranslation\n\n            inQuery = { _id: { \"$eq\": this.props.match.params.id } }\n            inOperator = { '$set': dataToSubmit }\n            inParams = { new: true }\n\n            // let updated = current.position\n            let updated = await plg_updateOne_queMod_oprMod({ model: 'slide', myprops: this.props, actionType: 'detail', inQuery, inOperator, inParams })\n\n            if (updated.payload.position !== current.position || updated.payload.visible !== current.visible) {\n\n                inQuery = {\n                    _id: { \"$ne\": updated.payload._id },\n                    country: { \"$eq\": updated.payload.country },\n                    language: { \"$eq\": updated.payload.language },\n                    position: { \"$eq\": updated.payload.position },\n                }\n                inOperator = {\n                    \"$set\": { position: current.position }\n                }\n\n                await plg_updateOne_queMod_oprMod({ model: 'slide', myprops: this.props, actionType: 'samestate', inQuery, inOperator, inParams })\n            }\n\n            // POSITION UPDATE on main Slide List\n            if (updated.payload.lgbinder !== '') {\n\n                inQuery = {\n                    _id: { \"$ne\": updated.payload._id },\n                    lgbinder: { \"$eq\": updated.payload.lgbinder }\n                }\n\n                otherlanguages = await plg_queryMany({ mystate: this.state, model: 'slide', myprops: this.props, actionType: 'samestate', inQuery, populate: 'referenceID' })\n\n                for (const item of Object.values(otherlanguages.payload)) {\n\n                    // For every lgbinder change position\n                    if (updated.payload.position !== current.position || updated.payload.visible !== current.visible) {\n                        inQuery = {\n                            country: { \"$eq\": item.country },\n                            language: { \"$eq\": item.language },\n                        }\n\n                        let count = await plg_countDocuments({ model: 'slide', myprops: this.props, actionType: 'samestate', inQuery })\n\n                        inQuery = {\n                            _id: { \"$eq\": item._id }\n                        }\n                        inParams = { new: true }\n\n                        if (updated.payload.position > count.payload) {\n\n                            inOperator = {\n                                \"$set\": { position: count.payload, visible: updated.payload.visible },\n\n                            }\n                        } else {\n\n                            inOperator = {\n                                \"$set\": { position: updated.payload.position, visible: updated.payload.visible }\n                            }\n                        }\n\n                        let lgbupdated = await plg_updateOne_queMod_oprMod({ model: 'slide', myprops: this.props, actionType: 'samestate', inQuery, inOperator, inParams })\n\n                        inQuery = {\n                            _id: { \"$ne\": lgbupdated.payload._id },\n                            country: { \"$eq\": item.country },\n                            language: { \"$eq\": item.language },\n                            position: { \"$eq\": lgbupdated.payload.position },\n                        }\n\n                        inOperator = {\n                            \"$set\": { position: item.position }\n                        }\n\n                        await plg_updateOne_queMod_oprMod({ model: 'slide', myprops: this.props, actionType: 'samestate', inQuery, inOperator, inParams })\n                    }\n\n                    // --------------------\n                    if (translate) {\n\n                        // RUN MY TRANSLATION ENGINE HERE\n                        inQuery = { name: { \"$eq\": this.props.mysite.CurrentMysite.mysitePrefs.translation_engine } }\n                        let engine = await plg_findOne_QueMod({ model: 'transengine', myprops: this.props, actionType: 'samestate', inQuery })\n\n                        cleanTranslation = await runtranslation({ source: updated.payload.language, target: item.language, content: updated.payload.lineTwo, myprops: this.props, engine: engine.payload })\n\n                        if (cleanTranslation.Success) {\n\n                            // Change API counter\n\n                            // await updateEngine({ engine: engine.payload, myprops: this.props })\n\n                            inQuery = { _id: { \"$eq\": item._id } }\n                            inOperator = { '$set': { lineTwo: cleanTranslation.result } }\n                            inParams = { new: true }\n\n                            await plg_updateOne_queMod_oprMod({ model: 'slide', myprops: this.props, actionType: 'samestate', inQuery, inOperator, inParams })\n\n                            // Update translation\n                        } else {\n                            // API DID NOT RETURN TRANSLATION\n\n                            let inQuery = { _id: { \"$eq\": this.props.match.params.id } }\n                            await plg_findOne_QueMod({ model: 'slide', myprops: this.props, actionType: 'detail', inQuery })\n\n                            // Set Custom Message\n                            inQuery = { type: { \"$eq\": 'custom' } }\n                            let inOperator = { '$set': { 'text': cleanTranslation.result } }\n                            await plg_updateOne_queMod_oprMod({ model: 'message', actionType: 'detail', myprops: this.props, inQuery, inOperator })\n\n                            // Clear Message\n                            setTimeout(async () => {\n                                inQuery = { type: { \"$eq\": 'custom' } }\n                                inOperator = { '$set': { 'text': '' } }\n                                await plg_updateOne_queMod_oprMod({ model: 'message', actionType: 'samestate', myprops: this.props, inQuery, inOperator })\n                                await plg_clearProps({ myprops: this.props, model: 'message', actionType: 'detail' })\n\n                            }, 5000)\n                        }\n                    }\n                }\n\n            }\n\n            // Handle Messages\n            inQuery = { type: { \"$eq\": 'completed' } }\n            await plg_findOne_QueMod({ model: 'message', myprops: this.props, actionType: 'detail', inQuery })\n\n            setTimeout(async () => {\n                await plg_clearProps({ myprops: this.props, model: 'message', actionType: 'detail' })\n            }, 500)\n\n        } else {\n            let inQuery = { type: { \"$eq\": 'error' } }\n            await plg_findOne_QueMod({ model: 'message', myprops: this.props, actionType: 'detail', inQuery })\n\n            setTimeout(async () => {\n                await plg_clearProps({ myprops: this.props, model: 'message', actionType: 'detail' })\n\n            }, 500)\n        }\n    }\n\n    addImagesHandler = async ({ images = null }) => {\n        let newLocalStorage = { ...this.state.localStorage }\n\n        let inQuery\n        let inOperator\n        let inParams\n\n        if (images !== null) { newLocalStorage['form']['formdata']['images'].value.push(images) }\n\n        inQuery = { _id: { \"$eq\": this.props.match.params.id } }\n        inOperator = { '$set': { images: newLocalStorage['form']['formdata']['images'].value } }\n        inParams = { new: true }\n\n        await plg_updateOne_queMod_oprMod({ model: 'slide', myprops: this.props, actionType: 'detail', inQuery, inOperator, inParams })\n\n\n        if (this.props.slides.DetailSlide.lgbinder !== '') {\n\n            inQuery = {\n                _id: { \"$ne\": this.props.slides.DetailSlide._id },\n                lgbinder: { \"$eq\": this.props.slides.DetailSlide.lgbinder }\n            }\n\n            let otherlanguages = await plg_queryMany({ mystate: this.state, model: 'slide', myprops: this.props, actionType: 'samestate', inQuery, populate: 'referenceID' })\n\n            for (const item of Object.values(otherlanguages.payload)) {\n\n                inQuery = {\n                    country: { \"$eq\": item.country },\n                    language: { \"$eq\": item.language },\n                    lgbinder: { \"$eq\": this.props.slides.DetailSlide.lgbinder }\n                }\n                inOperator = { '$set': { images: newLocalStorage['form']['formdata']['images'].value } }\n                inParams = { new: true }\n                await plg_updateOne_queMod_oprMod({ model: 'slide', myprops: this.props, actionType: 'samestate', inQuery, inOperator, inParams })\n\n            }\n        }\n    }\n    removeImagesHandler = async ({ images = null }) => {\n\n        let newLocalStorage = { ...this.state.localStorage }\n\n        let inQuery\n        let inOperator\n        let inParams\n        let reducedNewFormData\n\n        if (images !== null) {\n\n            reducedNewFormData = newLocalStorage['form']['formdata']['images'].value.filter(item => {\n\n                return item.public_id !== images.public_id;\n            })\n        }\n\n        inQuery = { _id: { \"$eq\": this.props.match.params.id } }\n        inOperator = { '$set': { images: reducedNewFormData } }\n        inParams = { new: true }\n\n        await plg_updateOne_queMod_oprMod({ model: 'slide', myprops: this.props, actionType: 'detail', inQuery, inOperator, inParams })\n\n\n        if (this.props.slides.DetailSlide.lgbinder !== '') {\n\n            inQuery = {\n                _id: { \"$ne\": this.props.slides.DetailSlide._id },\n                lgbinder: { \"$eq\": this.props.slides.DetailSlide.lgbinder }\n            }\n\n            let otherlanguages = await plg_queryMany({ mystate: this.state, model: 'slide', myprops: this.props, actionType: 'samestate', inQuery, populate: 'referenceID' })\n\n            for (const item of Object.values(otherlanguages.payload)) {\n\n                inQuery = {\n                    country: { \"$eq\": item.country },\n                    language: { \"$eq\": item.language },\n                    lgbinder: { \"$eq\": this.props.slides.DetailSlide.lgbinder }\n                }\n                inOperator = { '$set': { images: reducedNewFormData } }\n                inParams = { new: true }\n\n                await plg_updateOne_queMod_oprMod({ model: 'slide', myprops: this.props, actionType: 'samestate', inQuery, inOperator, inParams })\n\n            }\n        }\n\n        newLocalStorage['form']['formdata']['images'].value = reducedNewFormData\n        newLocalStorage['form']['formdata']['images'].valid = true\n        this.updateLocalStorage(newLocalStorage)\n    }\n\n    render() {\n        return (\n\n            <UserLayout>\n                <div>\n                    <form onSubmit={(event) => this.submitForm(event)}>\n                        <h1>Edit Slide</h1>\n                        <div>{this.state.localStorage.form.formdata.lgbinder.value}</div>\n                        <div>{this.showMessages()}</div>\n\n                        <FileUpload\n                            removeImagesHandler={({ images }) => this.removeImagesHandler({ images })}\n                            addImagesHandler={({ images }) => this.addImagesHandler({ images })}\n                            images_add={this.state.localStorage.form.formdata.images.value}\n                            model='slide'\n                            folder='XYZ'\n                        />\n                        <FormField\n                            id={'name'}\n                            formdata={this.state.localStorage.form.formdata.name}\n                            change={(element) => this.updateFormValues(element)}\n                        />\n                        <FormField\n                            id={'lineTwo'}\n                            formdata={this.state.localStorage.form.formdata.lineTwo}\n                            change={(element) => this.updateFormValues(element)}\n                        />\n                        <div className=\"form_divider\"></div>\n                        <FormField\n                            id={'position'}\n                            formdata={this.state.localStorage.form.formdata.position}\n                            // defaultValue={{ key: 1, value: 1 }}\n                            change={(element) => this.updateFormValues(element)}\n                        />\n                        <FormField\n                            id={'visible'}\n                            formdata={this.state.localStorage.form.formdata.visible}\n                            change={(element) => this.updateFormValues(element)}\n                        />\n                        <div>\n                            <button onClick={(event) => this.submitForm({ event, translate: false })}>Save</button>\n                            <button onClick={(event) => this.submitForm({ event, translate: true })}>Save Translate</button>\n\n                        </div>\n                    </form>\n                </div>\n            </UserLayout>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n\n    return {\n        slides: state.slides,\n        mysite: state.mysite,\n        user: state.user,\n        messages: state.messages\n    }\n}\n\nexport default connect(mapStateToProps)(EditSlide);","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\CMS\\Products\\list_product.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\Register_login\\index.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\Reset_user\\index.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\index.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\Home\\index.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\Product\\index.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\Shop\\index.js",["480","481"],"import React, { Component } from 'react';\nimport PageTop from '../utils/page_top';\n\n// import { frets, price } from '../utils/Form/fixed_categories';\nimport { connect } from 'react-redux';\n\n\nimport { getProductsToShop, getBrands, getWoods } from '../../redux/actions/products_actions';\nimport CollapseCheckBox from '../utils/collapseCheckbox';\nimport CollapseRadio from '../utils/collapseRadio';\n\nimport LoadmoreCards from './loadmoreCards';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faBars } from '@fortawesome/free-solid-svg-icons';\nimport { faTh } from '@fortawesome/free-solid-svg-icons';\n\nclass Shop extends Component {\n\n\n    state = {\n        grid: '',\n        limit: 6,\n        skip: 0,\n        filters: {\n            brand: [],\n            frets: [],\n            wood: [],\n            price: []\n        }\n    }\n\n    componentDidMount() {\n\n        this.props.dispatch(getBrands());\n        this.props.dispatch(getWoods());\n\n        this.props.dispatch(getProductsToShop(\n            this.state.skip,\n            this.state.limit,\n            this.state.filters\n        ))\n    }\n\n    // handlePrice = (value) => {\n    //     const data = price;\n    //     let array = [];\n\n    //     for (let key in data) {\n    //         if (data[key]._id === parseInt(value, 10)) {\n    //             array = data[key].array\n\n    //         }\n    //     }\n    //     return array;\n    // }\n\n    handleFilters = (filters, category) => {\n        const newFilters = { ...this.state.filters }\n        newFilters[category] = filters;\n\n        if (category === \"price\") {\n            let priceValues = this.handlePrice(filters);\n            newFilters[category] = priceValues\n        }\n        this.showFilteredResults(newFilters)\n        this.setState({\n            filters: newFilters\n        })\n    }\n    showFilteredResults = (filters) => {\n        this.props.dispatch(getProductsToShop(\n            0,\n            this.state.limit,\n            filters\n        ))\n            .then(() => {\n                this.setState({\n                    skip: 0\n                })\n            })\n    }\n\n\n    loadMoreCards = () => {\n        let skip = this.state.skip + this.state.limit;\n\n        this.props.dispatch(getProductsToShop(\n            skip,\n            this.state.limit,\n            this.state.filters,\n            this.props.products.toShop\n        )).then(()=>{\n            this.setState({\n                skip\n            })\n        })\n    }\n\n    handleGrid = () => {\n        this.setState({\n            grid: !this.state.grid ? 'grid_bars':''\n        })\n    }\n\n    render() {\n\n        const products = this.props.products;\n\n        return (\n            <div>\n                <PageTop\n                    title=\"Browse Products\"\n                />\n                <div className=\"container\">\n                    <div className=\"shop_wrapper\">\n                        <div className=\"left\">\n                            {/* <CollapseCheckBox\n                                initState={true}\n                                title=\"Brands\"\n                                list={products.brands}\n                                handleFilters={(filters) => this.handleFilters(filters, 'brand')}\n\n                            />\n                            <CollapseCheckBox\n                                initState={false}\n                                title=\"Frets\"\n                                list={frets}\n                                handleFilters={(filters) => this.handleFilters(filters, 'frets')}\n\n                            />\n                            <CollapseCheckBox\n                                initState={false}\n                                title=\"Wood\"\n                                list={products.woods}\n                                handleFilters={(filters) => this.handleFilters(filters, 'wood')}\n\n                            />\n                            <CollapseRadio\n                                initState={true}\n                                title=\"Price\"\n                                list={price}\n                                handleFilters={(filters) => this.handleFilters(filters, 'price')}\n\n                            /> */}\n                        </div>\n                        <div className=\"right\">\n                            <div className=\"shop_options\">\n                                <div className=\"shop_grids clear\">\n                                    <div\n                                    className={`grid_btn ${this.state.grid?'':'active'}`}\n                                    onClick={() => this.handleGrid()}\n                                    >\n                                        <FontAwesomeIcon icon={faTh}/>\n\n                                    </div>\n                                    <div\n                                    className={`grid_btn ${!this.state.grid?'':'active'}`}\n                                    onClick={() => this.handleGrid()}\n                                    >\n                                        <FontAwesomeIcon icon={faBars}/>\n\n                                    </div>\n                                </div>\n                            </div>\n                            <div>\n                                <LoadmoreCards\n                                    grid={this.state.grid}\n                                    limit={this.state.limit}\n                                    size={products.toShopSize}\n                                    products={products.toShop}\n                                    loadMore={() => this.loadMoreCards()} />\n\n                            </div>\n                        </div>\n\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        products: state.products\n    }\n}\n\nexport default connect(mapStateToProps)(Shop);\n","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\redux\\reducers\\user_reducer.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\redux\\reducers\\system\\block_reducer.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\redux\\reducers\\APIdata\\dataset_reducer.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\redux\\reducers\\system\\messages_reducer.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\redux\\reducers\\system\\mysite_reducer.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\redux\\reducers\\system\\language_reducer.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\redux\\reducers\\system\\menu_reducer.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\redux\\reducers\\system\\taxonomy_reducer.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\redux\\reducers\\CMS\\product_reducer.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\redux\\reducers\\CMS\\slides_reducer.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\utils\\paypal.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\hoc\\user.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\update_personal_nfo.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\utils\\Plugs\\cms_plugs.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\redux\\actions\\user_actions.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\utils\\Form\\formfield.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\utils\\Form\\formActions.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\utils\\User\\product_block.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\CMS\\Products\\list_product_block.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\utils\\Form\\CMS\\fileupload_generic.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\utils\\Funcs\\translationfuncs.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\CMS\\Slides\\list_slides_block.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\system\\Taxonomy\\list_taxonomy_block.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\system\\Mysites\\add_themePrefs_header.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\system\\Mysites\\add_themePrefs_body.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\system\\Mysites\\add_themePrefs_footer.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\system\\Mysites\\add_ecomPrefs.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\system\\Mysites\\add_layoutPrefs.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\system\\Mysites\\add_mysitePrefs.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\system\\Mysites\\add_addressPrefs.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\system\\Mysites\\list_mysite_block.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\system\\Languages\\add_language_block.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\APIdata\\Nations\\list_nations_block.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\system\\Mysites\\edit_themePrefs_body.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\system\\Mysites\\edit_themePrefs_footer.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\Register_login\\login.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\utils\\User\\history_block.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\Shop\\loadmoreCards.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\redux\\actions\\types.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\Header_footer\\Footer\\index.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\Header_footer\\Header\\index.js",["482"],"\n\nimport React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\n\nimport { connect } from 'react-redux';\nimport MenuLanguage from './menuLanguage';\nimport MenuCurrency from './menuCurrency';\n\nimport Logo from './logo';\n\nimport { logoutUser } from '../../../redux/actions/user_actions';\n\n\nclass Header extends Component {\n\n\n    state = {\n        page: [\n            {\n                name: 'Home',\n                linkTo: '/',\n                public: true\n            },\n            {\n                name: 'Guitars',\n                linkTo: '/shop',\n                public: true\n            }\n        ],\n        user: [\n            {\n                name: 'My Cart',\n                linkTo: '/user/cart',\n                public: false\n            },\n            {\n                name: 'My Account',\n                linkTo: '/user/dashboard',\n                public: false\n            },\n            {\n                name: 'Log in',\n                linkTo: '/register_login',\n                public: true\n            },\n            {\n                name: 'Log out',\n                linkTo: '/user/logout',\n                public: false\n            },\n        ]\n    }\n\n\n    renderLogo = () => {\n        if ('CurrentMysite' in this.props.mysite) {\n            return (\n         <Logo />\n            )\n        }\n    }\n\n    renderLgDropdown = () => {\n        if ('localeUser' in this.props.user) {\n            return (\n                <div>\n                <MenuLanguage />\n                {/* <MenuCurrency /> */}\n                </div>\n            )\n        }\n    }\n\n    logoutHandler = () => {\n        this.props.dispatch(logoutUser()).then(response => {\n            if (response.payload.success) {\n                this.props.history.push('/')\n            }\n        })\n    }\n\n\n    cartLink = (item, i) => {\n        const user = this.props.user.userData;\n\n        return (\n            <div className=\"cart_link\" key={i}>\n                <span>{user.cart ? user.cart.length : 0}</span>\n                <Link to={item.linkTo}>\n                    {item.name}\n                </Link>\n            </div>\n        )\n    }\n\n\n    defaultLink = (item, i) => (\n        item.name === 'Log out' ?\n            <div className=\"log_out_link\"\n                key={i}\n                onClick={() => this.logoutHandler()}\n            >\n                {item.name}\n            </div>\n\n            :\n            <Link to={item.linkTo} key={i}>\n                {item.name}\n            </Link>\n    )\n\n    showLinks = (type) => {\n        let list = [];\n\n        if (this.props.user.userData) {\n            type.forEach((item) => {\n                if (!this.props.user.userData.isAuth) {\n                    if (item.public === true) {\n                        list.push(item)\n                    }\n                } else {\n                    if (item.name !== 'Log in') {\n                        list.push(item)\n                    }\n                }\n            });\n        }\n\n        return list.map((item, i) => {\n            if (item.name !== 'My Cart') {\n                return this.defaultLink(item, i)\n            } else {\n                return this.cartLink(item, i)\n            }\n\n        })\n    }\n\n\n    render() {\n        return (\n            <header className=\"bck_b_light\">\n                <div className=\"container\">\n                    <div className=\"left\">\n                        <div className=\"logo\">\n                            {this.renderLogo()}\n                        </div>\n                    </div>\n                    <div className=\"right\">\n                        <div className=\"top\">\n\n                            {this.showLinks(this.state.user)}\n\n                        </div>\n                        <div className=\"bottom\">\n                            {this.showLinks(this.state.page)}\n                        </div>\n                    </div>\n                    {this.renderLgDropdown()}\n                </div>\n            </header>\n        );\n    }\n}\n\n\nfunction mapStateToProps(state) {\n    return {\n        user: state.user,\n        mysite: state.mysite\n    }\n}\n\nexport default connect(mapStateToProps)(withRouter(Header));","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\utils\\button.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\utils\\Form\\colorpicker.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\utils\\misc.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\utils\\collapseCheckbox.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\utils\\collapseRadio.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\redux\\actions\\products_actions.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\redux\\actions\\generic\\generic_actions.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\utils\\page_top.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\Product\\prodNfo.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\Product\\prodImg.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\system\\Mysites\\edit_ecomPrefs.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\system\\Mysites\\edit_themePrefs_header.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\system\\Mysites\\edit_addressPrefs.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\system\\Mysites\\edit_mysitePrefs.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\system\\Mysites\\edit_layoutPrefs.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\system\\Languages\\list_languages_block.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\utils\\card_block_shop.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\Header_footer\\Header\\logo.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\Header_footer\\Header\\menuCurrency.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\Header_footer\\Header\\menuLanguage.js",["483"],"import React, { Component } from 'react';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n\r\nimport {\r\n    plg_clearProps,\r\n    plg_findOne_QueMod,\r\n    plg_queryMany,\r\n} from '../../utils/Plugs/cms_plugs';\r\n\r\nimport { setCookie, setCurrency } from '../../../redux/actions/user_actions';\r\n\r\n\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport Avatar from '@material-ui/core/Avatar';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nclass MenuLanguage extends Component {\r\n\r\n    state = {\r\n        localStorage: {\r\n            view: {\r\n                limit: 10,\r\n                sortBy: 'position',\r\n                sortOrder: 1,\r\n            },\r\n            menu: {\r\n                selected: null,\r\n                anchor: null\r\n            }\r\n        }\r\n    }\r\n    async componentDidUpdate(prevProps, prevState) {\r\n        \r\n    }\r\n\r\n    handleClose = async () => {\r\n        let newLocalStorage = { ...this.state.localStorage }\r\n        newLocalStorage.menu['anchor'] = null\r\n        newLocalStorage.menu['selected'] = null\r\n\r\n        await plg_clearProps({ myprops: this.props, model: 'language', actionType: 'menu' })\r\n\r\n        this.updateLocalStorage(newLocalStorage)\r\n    };\r\n\r\n    handleClick = async (event) => {\r\n        let newLocalStorage = { ...this.state.localStorage }\r\n        newLocalStorage.menu['anchor'] = event.currentTarget\r\n\r\n        let inQuery = { visible: true}\r\n\r\n       await plg_queryMany({ mystate: this.state, model: 'language', myprops: this.props, actionType: 'menu', inQuery, populate: 'referenceID' })\r\n\r\n        this.updateLocalStorage(newLocalStorage)\r\n\r\n    }\r\n\r\n    updateLocalStorage = (localStorage) => {\r\n\r\n        this.setState({\r\n            localStorage\r\n        })\r\n    }\r\n\r\n    renderImage_Nation = (item) => {\r\n        if (item.flag !== undefined && item.flag.length > 0) {\r\n            return item.flag\r\n        } else {\r\n            return '/images/image_not_availble.png'\r\n        }\r\n    }\r\n\r\n    renderList = () => (\r\n        <div>\r\n            <Button\r\n                aria-controls=\"simple-menu\"\r\n                aria-haspopup=\"true\"\r\n                onClick={(element) => this.handleClick(element)}\r\n            >\r\n                {'localeUser' in this.props.user ?\r\n                    <div>\r\n                        <Avatar variant=\"circular\" alt=\"Flag\" src={this.renderImage_Nation(this.props.user.localeUser.referenceID)} />\r\n                        {this.props.user.localeUser.referenceID.languages[0].name}\r\n\r\n                    </div>\r\n\r\n                    : 'Choose Language'}\r\n            </Button>\r\n            <Menu\r\n                id=\"simple-menu\"\r\n                anchorEl={this.state.localStorage.menu.anchor}\r\n\r\n                keepMounted\r\n                open={Boolean(this.state.localStorage.menu.anchor)}\r\n                onClose={this.handleClose}\r\n            >\r\n\r\n                {'MenuLanguages' in this.props.languages && this.props.languages.MenuLanguages !== '' ?\r\n                    this.props.languages.MenuLanguages.map((item, index) => (\r\n\r\n                        <MenuItem selected={index === this.state.localStorage.menu.selected } key={item._id} onClick={(e) => this.handleChange(e, item._id, index)}>\r\n                            <ListItemAvatar>\r\n                                <Avatar variant=\"circular\" alt=\"Flag\" src={this.renderImage_Nation(item.referenceID)} />\r\n                            </ListItemAvatar>\r\n                            {item.referenceID.languages[0].name}\r\n                        </MenuItem>\r\n\r\n                    ))\r\n                    : null}\r\n            </Menu>\r\n        </div>\r\n    )\r\n\r\n    handleChange = async (event, id, index) => {\r\n        let newLocalStorage = { ...this.state.localStorage }\r\n        newLocalStorage.menu['anchor'] = null\r\n        newLocalStorage.menu['selected'] = index\r\n        this.updateLocalStorage(newLocalStorage)\r\n\r\n        let inQuery = { _id: { \"$eq\": id  }}\r\n        await plg_findOne_QueMod({ model: 'language', myprops: this.props, actionType: 'locale', inQuery, populate: 'referenceID' })\r\n\r\n        // Currency also needs to change ==============\r\n\r\n        inQuery = {\r\n            name: { \"$eq\": this.props.mysite.CurrentMysite.mysitePrefs.conversion_engine }\r\n        }\r\n\r\n        let engine = await this.props.dispatch(plg_findOne_QueMod({ mystate: this.state, model: 'transengine', myprops: this.props, actionType: 'samestate', inQuery }))\r\n\r\n        let matchCurrency\r\n        for (const [key, value] of Object.entries(engine.payload.syncdata.rates)) {\r\n            if (this.props.user.localeUser.referenceID.currencies[0].code === key) {\r\n                matchCurrency = { rates: { [key]: value }, base: engine.payload.syncdata.base }\r\n                break\r\n            } \r\n        }\r\n\r\n        // IF no currency found in converter engine\r\n\r\n        if (matchCurrency === undefined) {\r\n            matchCurrency = { rates: { [engine.payload.syncdata.base]: 1 }, base: engine.payload.syncdata.base }\r\n        }\r\n\r\n        // console.log(this.props.user);\r\n\r\n        matchCurrency['deflangbase'] = this.props.user.currencyUser.deflangbase\r\n\r\n        await this.props.dispatch(setCurrency(matchCurrency))\r\n\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.renderList()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        user: state.user,\r\n        mysite: state.mysite,\r\n        languages: state.languages\r\n\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(MenuLanguage);","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\redux\\actions\\generic\\generic_types.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\redux\\actions\\generic\\generic_handlers.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\utils\\card.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\utils\\Form\\Fixed_categories\\taxonomy_type.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\utils\\Form\\checkFormField.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\utils\\Form\\Uimaterials\\Stateless\\uimat_list_nostate.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\utils\\Form\\Uimaterials\\Stateless\\uimat_transferlist_nostate.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\utils\\Form\\Uimaterials\\State\\uimat_transferlist_state.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\utils\\Funcs\\basefuncs.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\Generic\\parts_funcs.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\Generic\\taxo_funcs.js",["484"],"import {\r\n    plg_queryMany,\r\n    plg_findOne_QueMod,\r\n    plg_updateOne_queMod_oprMod,\r\n    // plg_countDocuments,\r\n    // plg_removeOne,\r\n    // plg_removeFile_Cloudinary,\r\n    // plg_updateMany,\r\n    // plg_clearProps,\r\n    // plg_create_oprMod\r\n} from '../../../utils/Plugs/cms_plugs';\r\nimport { ob_valuefilter_toArray } from '../../../utils/Funcs/basefuncs'\r\nimport { createTranslatedTag } from './submit_funcs'\r\n\r\nexport async function onChangeTaxoSync({ checked = null, formdata = null, form = null, mystate = null, myprops = null, taxonomy_type = null }) {\r\n\r\n    let newLocalStorage = { ...mystate.localStorage }\r\n    let inQuery\r\n    let revformdata\r\n    let revform\r\n    let alltaxo_Arr\r\n    let alltags_Arr\r\n    let combinedTags_Arr\r\n    let uniqueCombinedTags_Arr\r\n    // SET VALUE SOURCE\r\n    newLocalStorage['form'][formdata][form].value = checked\r\n\r\n    if (formdata === 'filtertags') {\r\n        revform = form === 'filterparent' ? 'tagparent' : 'tagchild'\r\n        revformdata = formdata === 'formdata' ? 'filtertags' : 'formdata'\r\n        alltaxo_Arr = [...mystate.localStorage.form[revformdata][revform].value]\r\n\r\n    } else if (formdata === 'formdata') {\r\n        revform = form === 'tagparent' ? 'filterparent' : 'filterchild'\r\n        revformdata = formdata === 'formdata' ? 'filtertags' : 'formdata'\r\n        alltags_Arr = [...mystate.localStorage.form[revformdata][revform].value]\r\n\r\n    }\r\n\r\n\r\n    // SET VALUE TARGET\r\n    if (formdata === 'filtertags') {\r\n        newLocalStorage['form'][revformdata][revform].value = alltaxo_Arr\r\n\r\n    } else if (formdata === 'formdata') {\r\n        // Get tags from taxonomies and flatten them\r\n        let uniqueExtractTags_Arr = await editSyncFiltertags({ tags: checked })\r\n\r\n        // Get tags from taxonomies and checked tags\r\n\r\n        combinedTags_Arr = [...alltags_Arr, ...uniqueExtractTags_Arr]\r\n\r\n        uniqueCombinedTags_Arr = combinedTags_Arr.reduce((accum, currentvalue) => {\r\n\r\n            return accum.find(obj => obj.name === currentvalue.name) ? accum : [...accum, currentvalue]\r\n\r\n        }, []);\r\n\r\n        // Set value\r\n        newLocalStorage['form'][revformdata][revform].value = uniqueCombinedTags_Arr\r\n    }\r\n\r\n    // SET OPTIONS TARGET\r\n    if (formdata === 'filtertags') {\r\n\r\n        if (checked.length > 0) {\r\n\r\n            inQuery = {\r\n                _id: { \"$ne\": myprops.match.params.id ? myprops.match.params.id : null },\r\n                country: { \"$eq\": myprops.user.localeUser.referenceID.alpha2Code },\r\n                language: { \"$eq\": myprops.user.localeUser.referenceID.languages[0].iso639_1 },\r\n                // typetagmain: { \"$in\": checked }\r\n                \"$or\": [{ typetagmain: { \"$in\": checked } }, { typetagmain: [] }],\r\n\r\n            }\r\n\r\n        }\r\n\r\n        let response = await plg_queryMany({ mystate, model: 'taxonomy', myprops, actionType: 'samestate', inQuery })\r\n        newLocalStorage['form'][revformdata][revform].config.options = response.payload\r\n\r\n    } else if (formdata === 'formdata') {\r\n\r\n        // odjac unique Combined od taxonomy_type\r\n        const alltags_Arr_new = taxonomy_type.reduce((accum, currentvalue) => {\r\n            return uniqueCombinedTags_Arr.find(item => item.name === currentvalue.name) ? accum : [...accum, currentvalue]\r\n        }, []);\r\n\r\n        newLocalStorage['form'][revformdata][revform].config.options = alltags_Arr_new\r\n\r\n    }\r\n    // SET OPTIONS SOURCE\r\n    if (formdata === 'filtertags') {\r\n        const alltags_Arr_new = taxonomy_type.reduce((accum, currentvalue) => {\r\n            return checked.find(item => item.name === currentvalue.name) ? accum : [...accum, currentvalue]\r\n        }, []);\r\n\r\n        newLocalStorage['form'][formdata][form].config.options = alltags_Arr_new\r\n\r\n    } else if (formdata === 'formdata') {\r\n        if (uniqueCombinedTags_Arr.length > 0) {\r\n\r\n            inQuery = {\r\n                _id: { \"$ne\": myprops.match.params.id ? myprops.match.params.id : null },\r\n                country: { \"$eq\": myprops.user.localeUser.referenceID.alpha2Code },\r\n                language: { \"$eq\": myprops.user.localeUser.referenceID.languages[0].iso639_1 },\r\n                // typetagmain: { \"$in\": uniqueCombinedTags_Arr }\r\n                \"$or\": [{ typetagmain: { \"$in\": uniqueCombinedTags_Arr } }, { typetagmain: [] }],\r\n\r\n            }\r\n\r\n\r\n        } else if (uniqueCombinedTags_Arr.length === 0) {\r\n\r\n            inQuery = {\r\n                _id: { \"$ne\": myprops.match.params.id ? myprops.match.params.id : null },\r\n                country: { \"$eq\": myprops.user.localeUser.referenceID.alpha2Code },\r\n                language: { \"$eq\": myprops.user.localeUser.referenceID.languages[0].iso639_1 },\r\n            }\r\n        }\r\n\r\n        let response = await plg_queryMany({ mystate, model: 'taxonomy', myprops, actionType: 'samestate', inQuery })\r\n        newLocalStorage['form'][formdata][form].config.options = response.payload\r\n\r\n    }\r\n\r\n    return newLocalStorage\r\n\r\n}\r\n\r\nexport async function onRemoveTaxoSync({ removed = null, formdata = null, form = null, mystate = null, myprops = null, taxonomy_type = null }) {\r\n\r\n    let inQuery\r\n    let alltaxo_Arr\r\n    let alltaxo_Obj\r\n    let alltaxo_Arr_new\r\n    let alltags_Obj\r\n    let alltags_Arr\r\n    let alltags_Arr_new\r\n    let revform\r\n    let revformdata\r\n    let uniqueCombinedTags_Arr\r\n    let combinedTags_Arr\r\n\r\n    let newLocalStorage = { ...mystate.localStorage }\r\n\r\n    // SET VALUE SOURCE\r\n    if (formdata === 'filtertags') {\r\n        revform = form === 'filterparent' ? 'tagparent' : 'tagchild'\r\n        revformdata = formdata === 'formdata' ? 'filtertags' : 'formdata'\r\n\r\n        alltags_Obj = { ...mystate.localStorage.form[formdata][form].value }\r\n        alltaxo_Arr = [...mystate.localStorage.form[revformdata][revform].value]\r\n        alltags_Arr_new = await ob_valuefilter_toArray(alltags_Obj, removed)\r\n\r\n        newLocalStorage['form'][formdata][form].value = alltags_Arr_new\r\n\r\n    } else if (formdata === 'formdata') {\r\n        revform = form === 'tagparent' ? 'filterparent' : 'filterchild'\r\n        revformdata = formdata === 'formdata' ? 'filtertags' : 'formdata'\r\n\r\n        // alltags_Arr = [...mystate.localStorage.form[revformdata][revform].value]\r\n        alltaxo_Obj = { ...mystate.localStorage.form[formdata][form].value }\r\n        alltaxo_Arr_new = await ob_valuefilter_toArray(alltaxo_Obj, removed)\r\n\r\n        newLocalStorage['form'][formdata][form].value = alltaxo_Arr_new\r\n\r\n    }\r\n\r\n    // SET VALUE TARGET\r\n    if (formdata === 'filtertags') {\r\n        if (alltags_Arr_new.length > 0) {\r\n\r\n            let filteredTaxo_Arr = alltaxo_Arr.reduce((accum, currentvalue) => {\r\n                return currentvalue.typetagmain.find(item => {\r\n                    return alltags_Arr_new.find(obj => obj.name === item.name) ? true : false\r\n                }) ? [...accum, currentvalue] : accum\r\n            }, []);\r\n\r\n            newLocalStorage['form'][revformdata][revform].value = filteredTaxo_Arr\r\n\r\n        } else if (alltags_Arr_new.length === 0) {\r\n\r\n            newLocalStorage['form'][revformdata][revform].value = []\r\n\r\n        }\r\n    } else if (formdata === 'formdata') {\r\n        if (alltaxo_Arr_new.length > 0) {\r\n            // Extract Tags from taxonomies\r\n            let uniqueExtractTags_Arr = await editSyncFiltertags({ tags: alltaxo_Arr_new })\r\n\r\n            // Get Tags from Tags & Combine both and make unique\r\n\r\n            // alternative segment1\r\n            // combinedTags_Arr = [...alltags_Arr, ...uniqueExtractTags_Arr]\r\n\r\n            combinedTags_Arr = [...uniqueExtractTags_Arr]\r\n\r\n            uniqueCombinedTags_Arr = combinedTags_Arr.reduce((accum, currentvalue) => {\r\n\r\n                return accum.find(obj => obj.name === currentvalue.name) ? accum : [...accum, currentvalue]\r\n\r\n            }, []);\r\n\r\n            newLocalStorage['form'][revformdata][revform].value = uniqueCombinedTags_Arr\r\n\r\n        } else if (alltaxo_Arr_new.length === 0) {\r\n            newLocalStorage['form'][revformdata][revform].value = []\r\n\r\n        }\r\n    }\r\n\r\n    // SET OPTIONS SOURCE\r\n    if (formdata === 'filtertags') {\r\n        if (alltags_Arr_new.length > 0) {\r\n            const optionsSource_Arr = taxonomy_type.reduce((accum, currentvalue) => {\r\n                return alltags_Arr_new.find(item => item.name === currentvalue.name) ? accum : [...accum, currentvalue]\r\n            }, []);\r\n\r\n            newLocalStorage['form'][formdata][form].config.options = optionsSource_Arr\r\n\r\n        } else if (alltags_Arr_new.length === 0) {\r\n\r\n            newLocalStorage['form'][formdata][form].config.options = taxonomy_type\r\n\r\n        }\r\n    } else if (formdata === 'formdata') {\r\n\r\n        if (alltaxo_Arr_new.length > 0 && uniqueCombinedTags_Arr.length > 0) {\r\n\r\n            inQuery = {\r\n                _id: { \"$ne\": myprops.match.params.id ? myprops.match.params.id : null },\r\n                country: { \"$eq\": myprops.user.localeUser.referenceID.alpha2Code },\r\n                language: { \"$eq\": myprops.user.localeUser.referenceID.languages[0].iso639_1 },\r\n                // typetagmain: { \"$in\": uniqueCombinedTags_Arr }\r\n                \"$or\": [{ typetagmain: { \"$in\": uniqueCombinedTags_Arr } }, { typetagmain: [] }],\r\n\r\n            }\r\n        } else {\r\n            inQuery = {\r\n                _id: { \"$ne\": myprops.match.params.id ? myprops.match.params.id : null },\r\n                country: { \"$eq\": myprops.user.localeUser.referenceID.alpha2Code },\r\n                language: { \"$eq\": myprops.user.localeUser.referenceID.languages[0].iso639_1 },\r\n            }\r\n        }\r\n\r\n        let response = await plg_queryMany({ mystate, model: 'taxonomy', myprops, actionType: 'samestate', inQuery, inLimit: 10000 })\r\n        newLocalStorage['form'][formdata][form].config.options = response.payload\r\n    }\r\n\r\n    // SET OPTIONS TARGET\r\n    if (formdata === 'filtertags') {\r\n\r\n\r\n        if (alltags_Arr_new.length > 0) {\r\n            inQuery = {\r\n                _id: { \"$ne\": myprops.match.params.id ? myprops.match.params.id : null },\r\n                country: { \"$eq\": myprops.user.localeUser.referenceID.alpha2Code },\r\n                language: { \"$eq\": myprops.user.localeUser.referenceID.languages[0].iso639_1 },\r\n                // typetagmain: { \"$in\": alltags_Arr_new }\r\n                \"$or\": [{ typetagmain: { \"$in\": alltags_Arr_new } }, { typetagmain: [] }],\r\n\r\n            }\r\n        } else if (alltags_Arr_new.length === 0) {\r\n            inQuery = {\r\n                _id: { \"$ne\": myprops.match.params.id ? myprops.match.params.id : null },\r\n                country: { \"$eq\": myprops.user.localeUser.referenceID.alpha2Code },\r\n                language: { \"$eq\": myprops.user.localeUser.referenceID.languages[0].iso639_1 },\r\n            }\r\n        }\r\n\r\n        let response = await plg_queryMany({ mystate, model: 'taxonomy', myprops, actionType: 'samestate', inLimit: 10000, inQuery })\r\n        newLocalStorage['form'][revformdata][revform].config.options = response.payload\r\n\r\n    } else if (formdata === 'formdata') {\r\n        if (alltaxo_Arr_new.length > 0) {\r\n            //  Trzeba odjac uniqueCombinedTags_Arr od taxonomy_type\r\n            const alltags_Arr_new = taxonomy_type.reduce((accum, currentvalue) => {\r\n                return uniqueCombinedTags_Arr.find(item => item.name === currentvalue.name) ? accum : [...accum, currentvalue]\r\n            }, []);\r\n\r\n            newLocalStorage['form'][revformdata][revform].config.options = alltags_Arr_new\r\n\r\n        } else if (alltaxo_Arr_new.length === 0) {\r\n            newLocalStorage['form'][revformdata][revform].config.options = taxonomy_type\r\n\r\n        }\r\n    }\r\n\r\n    return newLocalStorage\r\n}\r\n\r\nexport async function onRemoveTag({ removed = null, formdata = null, form = null, mystate = null, myprops = null, taxonomy_type = null }) {\r\n\r\n    let alltags_Obj\r\n    let alltags_Arr_new\r\n\r\n    let newLocalStorage = { ...mystate.localStorage }\r\n\r\n    // SET VALUE SOURCE\r\n\r\n    alltags_Obj = { ...mystate.localStorage.form[formdata][form].value }\r\n    alltags_Arr_new = await ob_valuefilter_toArray(alltags_Obj, removed)\r\n\r\n    newLocalStorage['form'][formdata][form].value = alltags_Arr_new\r\n\r\n    // SET OPTIONS SOURCE\r\n    if (alltags_Arr_new.length > 0) {\r\n        const optionsSource_Arr = taxonomy_type.reduce((accum, currentvalue) => {\r\n            return alltags_Arr_new.find(item => item.name === currentvalue.name) ? accum : [...accum, currentvalue]\r\n        }, []);\r\n\r\n        newLocalStorage['form'][formdata][form].config.options = optionsSource_Arr\r\n\r\n    } else if (alltags_Arr_new.length === 0) {\r\n\r\n        newLocalStorage['form'][formdata][form].config.options = taxonomy_type\r\n\r\n    }\r\n\r\n    return newLocalStorage\r\n}\r\nexport async function onChangeTag({ checked = null, formdata = null, form = null, mystate = null, taxonomy_type = null }) {\r\n\r\n    let newLocalStorage = { ...mystate.localStorage }\r\n\r\n    // SET VALUE SOURCE\r\n    newLocalStorage['form'][formdata][form].value = checked\r\n\r\n    // SET OPTIONS SOURCE\r\n    const alltags_Arr_new = taxonomy_type.reduce((accum, currentvalue) => {\r\n        return checked.find(item => item.name === currentvalue.name) ? accum : [...accum, currentvalue]\r\n    }, []);\r\n\r\n    newLocalStorage['form'][formdata][form].config.options = alltags_Arr_new\r\n\r\n    return newLocalStorage\r\n}\r\nexport async function addTag({ language = null, country = null, model = null, mystate = null, myprops = null, tagcollection = null, source_lg = null, target_lg = null }) {\r\n\r\n    let inQuery\r\n    let foundtag\r\n\r\n    let tagArray = []\r\n    inQuery = {\r\n        _id: { \"$in\": tagcollection }\r\n    }\r\n\r\n    let tagAssets = await plg_queryMany({ mystate, model, myprops, actionType: 'samestate', inQuery, populate: mystate.localStorage.qhelpers.populate })\r\n\r\n    for (let tagItem of Object.values(tagAssets.payload)) {\r\n\r\n        if (tagItem.lgbinder === '') {\r\n            let createdTag = await createTranslatedTag({ insert: tagItem, language, country, model, myprops, mystate, source_lg, target_lg })\r\n\r\n            if (createdTag) { tagArray.push(createdTag.payload._id) }\r\n        } else {\r\n\r\n            // Check if a selected tag has a translation for this specific language\r\n\r\n            inQuery = {\r\n                country: { \"$eq\": country },\r\n                language: { \"$eq\": language },\r\n                lgbinder: { \"$eq\": tagItem.lgbinder }\r\n            }\r\n\r\n            foundtag = await plg_findOne_QueMod({ model, myprops, actionType: 'samestate', inQuery })\r\n\r\n            if (foundtag.payload) {\r\n                tagArray.push(foundtag.payload._id)\r\n            } else {\r\n\r\n                let createdTag = await createTranslatedTag({ insert: tagItem, language, country, model, myprops, mystate, source_lg, target_lg })\r\n\r\n                if (createdTag) { tagArray.push(createdTag.payload._id) }\r\n            }\r\n        }\r\n    }\r\n\r\n    return tagArray\r\n}\r\nexport async function removeSubtags({ myprops = null, removed = null, model = null, mystate = null }) {\r\n\r\n    let inQuery\r\n    let inOperator\r\n\r\n    inQuery = {\r\n        \"$or\": [{ tagparent: removed.payload._id }, { tagchild: removed.payload._id }],\r\n        country: { \"$eq\": removed.payload.country },\r\n        language: { \"$eq\": removed.payload.language },\r\n    }\r\n\r\n    let listWithTag = await plg_queryMany({ mystate, model, myprops, actionType: 'samestate', inQuery })\r\n\r\n    if (Object.keys(listWithTag.payload).length > 0) {\r\n\r\n        let idtoremove = removed.payload._id\r\n\r\n        for (let value of Object.values(listWithTag.payload)) {\r\n\r\n            let resultparent = value.tagparent.filter((item, index) => {\r\n                return item !== idtoremove\r\n            });\r\n            let resultchild = value.tagchild.filter((item, index) => {\r\n                return item !== idtoremove\r\n            });\r\n\r\n            if (resultparent !== value.tagparent) {\r\n                inQuery = { _id: { \"$eq\": value._id } }\r\n                inOperator = { '$set': { tagparent: resultparent, tagchild: resultchild } }\r\n\r\n                await plg_updateOne_queMod_oprMod({ model, myprops, actionType: 'samestate', inQuery, inOperator })\r\n\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport async function editSyncFiltertags({ tags = null }) {\r\n\r\n    let extractfiltertags = tags.map(a => a.typetagmain)\r\n\r\n    let extractfiltertagsflat = extractfiltertags.flat()\r\n\r\n    let uniqueExtractFilterTags_Arr = extractfiltertagsflat.reduce((accum, currentvalue) => {\r\n\r\n        return accum.find(obj => obj.name === currentvalue.name) ? accum : [...accum, currentvalue]\r\n\r\n    }, []);\r\n\r\n    return uniqueExtractFilterTags_Arr\r\n\r\n}\r\nexport async function setTaxonomyTags({ myprops = null, insert = null, model = null, mystate = null, source_lg = null, target_lg = null, language = null, country = null }) {\r\n\r\n    let inQuery\r\n    let inOperator\r\n    let inParams\r\n\r\n    if (insert.tagparent.length > 0 || insert.tagchild.length > 0) {\r\n\r\n\r\n        let newtagparent = await addTag({ source_lg, target_lg, tagcollection: insert.tagparent, language, country, model, myprops, mystate })\r\n        let newtagchild = await addTag({ source_lg, target_lg, tagcollection: insert.tagchild, language, country, model, myprops, mystate })\r\n    \r\n        inQuery = {\r\n            country: { \"$eq\": country },\r\n            language: { \"$eq\": language },\r\n            lgbinder: { \"$eq\": insert.lgbinder }\r\n        }\r\n    \r\n        inOperator = {\r\n            \"$set\": { tagparent: newtagparent, tagchild: newtagchild }\r\n        }\r\n        inParams = { new: true }\r\n    \r\n        await plg_updateOne_queMod_oprMod({ model, myprops, actionType: 'samestate', inQuery, inOperator, inParams })\r\n    \r\n    }\r\n}\r\n\r\n","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\Generic\\submit_funcs.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\Generic\\remove_funcs.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\Generic\\repos_funcs.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\utils\\Funcs\\populate_funcs.js",["485","486","487"],"import {\r\n    plg_queryMany,\r\n    plg_findOne_QueMod,\r\n    plg_updateOne_queMod_oprMod,\r\n    plg_countDocuments,\r\n    // plg_removeOne,\r\n    // plg_removeFile_Cloudinary,\r\n    // plg_updateMany,\r\n    // plg_clearProps,\r\n    // plg_create_oprMod\r\n} from '../../utils/Plugs/cms_plugs';\r\n\r\nexport async function populatePosition({ model = null, myprops = null, formdata = null, field = null, type = null }) {\r\n    \r\n    let inQuery\r\n\r\n    inQuery = {\r\n        country: { \"$eq\": myprops.user.localeUser.referenceID.alpha2Code },\r\n        language: { \"$eq\": myprops.user.localeUser.referenceID.languages[0].iso639_1 },\r\n    }\r\n\r\n    let count = await plg_countDocuments({ model, myprops, actionType: 'samestate', inQuery })\r\n\r\n\r\n    const totalPos = [];\r\n\r\n    if (count.payload > 0) {\r\n\r\n        for (let i = 1; i <= count.payload; i++) {\r\n            totalPos.push({ key: i, value: i })\r\n          }\r\n    }\r\n\r\n    if (type === 'add') {\r\n        totalPos.push({ key: totalPos.length + 1, value: totalPos.length + 1 })\r\n    }\r\n\r\n    let newFormData = {\r\n        ...formdata\r\n    }\r\n\r\n    newFormData[field].config.options = totalPos;\r\n\r\n    // objac gore\r\n    if (type === 'add') {\r\n        newFormData[field].value = totalPos.length\r\n    }\r\n    else if (type === 'edit') {\r\n        newFormData[field].value = formdata[field].value\r\n    }\r\n\r\n    return newFormData[field];\r\n}","C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\Generic\\compo_funcs.js",["488","489","490","491","492"],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\Generic\\errormsg_funcs.js",[],"C:\\Users\\Monika Zajac\\Desktop\\MICHAL\\NPM\\biostore-master\\client\\src\\components\\User\\Admin\\Generic\\image_funcs.js",["493","494"],{"ruleId":"495","replacedBy":"496"},{"ruleId":"497","replacedBy":"498"},{"ruleId":"499","severity":1,"message":"500","line":6,"column":26,"nodeType":"501","messageId":"502","endLine":6,"endColumn":38},{"ruleId":"499","severity":1,"message":"503","line":9,"column":8,"nodeType":"501","messageId":"502","endLine":9,"endColumn":24},{"ruleId":"499","severity":1,"message":"504","line":10,"column":8,"nodeType":"501","messageId":"502","endLine":10,"endColumn":21},{"ruleId":"499","severity":1,"message":"505","line":8,"column":8,"nodeType":"501","messageId":"502","endLine":8,"endColumn":20},{"ruleId":"499","severity":1,"message":"506","line":13,"column":10,"nodeType":"501","messageId":"502","endLine":13,"endColumn":19},{"ruleId":"499","severity":1,"message":"507","line":138,"column":9,"nodeType":"501","messageId":"502","endLine":138,"endColumn":20},{"ruleId":"499","severity":1,"message":"508","line":2,"column":5,"nodeType":"501","messageId":"502","endLine":2,"endColumn":18},{"ruleId":"499","severity":1,"message":"509","line":3,"column":5,"nodeType":"501","messageId":"502","endLine":3,"endColumn":23},{"ruleId":"499","severity":1,"message":"510","line":4,"column":5,"nodeType":"501","messageId":"502","endLine":4,"endColumn":32},{"ruleId":"499","severity":1,"message":"511","line":3,"column":5,"nodeType":"501","messageId":"502","endLine":3,"endColumn":23},{"ruleId":"499","severity":1,"message":"510","line":5,"column":5,"nodeType":"501","messageId":"502","endLine":5,"endColumn":32},{"ruleId":"499","severity":1,"message":"512","line":6,"column":5,"nodeType":"501","messageId":"502","endLine":6,"endColumn":19},{"ruleId":"499","severity":1,"message":"513","line":7,"column":5,"nodeType":"501","messageId":"502","endLine":7,"endColumn":19},{"ruleId":"499","severity":1,"message":"514","line":8,"column":5,"nodeType":"501","messageId":"502","endLine":8,"endColumn":22},{"ruleId":"499","severity":1,"message":"513","line":3,"column":5,"nodeType":"501","messageId":"502","endLine":3,"endColumn":19},{"ruleId":"499","severity":1,"message":"509","line":4,"column":5,"nodeType":"501","messageId":"502","endLine":4,"endColumn":23},"no-native-reassign",["515"],"no-negated-in-lhs",["516"],"no-unused-vars","'updateEngine' is defined but never used.","Identifier","unusedVar","'CollapseCheckBox' is defined but never used.","'CollapseRadio' is defined but never used.","'MenuCurrency' is defined but never used.","'setCookie' is defined but never used.","'alltags_Arr' is defined but never used.","'plg_queryMany' is defined but never used.","'plg_findOne_QueMod' is defined but never used.","'plg_updateOne_queMod_oprMod' is defined but never used.","'plg_countDocuments' is defined but never used.","'plg_updateMany' is defined but never used.","'plg_clearProps' is defined but never used.","'plg_create_oprMod' is defined but never used.","no-global-assign","no-unsafe-negation"]